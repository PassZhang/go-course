package main

import "fmt"

func main() {
	var a uint = 60 /* 60 = 0011 1100 */
	var b uint = 13 /* 13 = 0000 1101 */
	var c uint = 0  /*赋予0值，二进制也是为0000 0000*/

	c = a & b /* 12 = 0000 1100 */
	// 按二进制位与运算符 "&" 是双目运算符，功能是参与与运算的两数各对应的二进制相与。
	fmt.Printf("第一行值c = %d\n", c)

	c = a | b /* 61 = 0011 1101 */
	// 按二进制位 或运算符 "|" 是双目运算符。其功能是残余运算的两束各对应的二进制位相或
	fmt.Printf("第二行值c = %d\n", c)

	c = a ^ b /* 49 = 0011 0001 */
	// 按二进制位 异或运算 "^" 是双目运算符。其功能是残余运算的两数各对应的二进制相异或，当两对应的二进制位相异时，结果为1.
	fmt.Printf("第三行值c = %d\n", c)

	c = a << 2 /* 240 = 1111 0000 */
	// 左移运算符 "<<" 是双目运算符。左移n位就是乘以2的n次方。其功能把 "<<" 左边的运算数的各二进制位全部左移若干位。由 "<<" 右边的数指定移动的位数，高位丢弃，低位补零。
	fmt.Printf("第四行值c = %d\n", c)

	c = a >> 2 /* 15 = 0000 1111 */
	// 	右移运算符">>"是双目运算符。右移n位就是除以2的n次方。 其功能是把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。
	fmt.Printf("第五行值c = %d\n", c)
}
